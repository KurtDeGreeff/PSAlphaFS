<?xml version="1.0" encoding="utf-8" ?>
<helpItems xmlns="http://msh" schema="maml">
	<!--Edited with: SAPIEN PowerShell HelpWriter 2015 v1.0.16-->
	<!--Generated by: SAPIEN PowerShell HelpWriter 2015 v1.0.15-->
	<!--All Commands-->
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Copy-LongItem</command:name>
			<maml:description>
				<maml:para/>
			</maml:description>
			<maml:copyright>
				<maml:para/>
			</maml:copyright>
			<command:verb>Copy</command:verb>
			<command:noun>LongItem</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>hello</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Copy-LongItem</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="0" aliases="">
					<maml:name>Path</maml:name>
					<maml:description>
						<maml:para>Specifies the path to the items to copy.</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
					<dev:defaultValue>None</dev:defaultValue>
				</command:parameter>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="1" aliases="">
					<maml:name>Destination</maml:name>
					<maml:description>
						<maml:para>Specifies the path to the new location. To rename a copied item, include the new name in the value.</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
					<dev:defaultValue>None</dev:defaultValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
					<maml:name>Force</maml:name>
					<maml:description>
						<maml:para>Allows the cmdlet to copy items that cannot otherwise be changed, such as copying over an existing file or directory.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="0" aliases="">
				<maml:name>Path</maml:name>
				<maml:description>
					<maml:para>Specifies the path to the items to copy.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>None</dev:defaultValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="1" aliases="">
				<maml:name>Destination</maml:name>
				<maml:description>
					<maml:para>Specifies the path to the new location. To rename a copied item, include the new name in the value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>None</dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
				<maml:name>Force</maml:name>
				<maml:description>
					<maml:para>Allows the cmdlet to copy items that cannot otherwise be changed, such as copying over an existing file or directory.</maml:para>
				</maml:description>
				<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				<dev:type>
					<maml:name>SwitchParameter</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue/>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.String
					</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para/>
				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<maml:description>
					<maml:para>This cmdlet does not return any output.</maml:para>
				</maml:description>
				<dev:type>
					<maml:name>None</maml:name>
					<maml:uri/>
				</dev:type>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<maml:title>Copy-LongItem</maml:title>
			<!--Notes-->
			<maml:alert>
				<maml:para>Copy-LongItem is like the &apos;cp&apos; or &apos;copy&apos; commands in other shells.
By default the recurse flag is set so a folder copy operation is always recursive.</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Copy-LongItem -Path C:\temp\drivers.txt -Destination C:\temp\folder1 -Verbose</dev:code>
				<dev:remarks>
					<maml:para>This command copies the drivers.txt file to the C:\temp\folder1 directory. &apos;folder1&apos; is created if it dosent exist. 

					</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Copy-LongItem C:\temp\logfiles -Destination C:\temp\newlogs</dev:code>
				<dev:remarks>
					<maml:para>This command copies the contents of the C:\Logfiles directory recursively to the C:\temp\newLogs directory. It creates the \newLogs subdirectory if it does not already exist.</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-LongChildItem</command:name>
			<maml:description>
				<maml:para>Gets the items and child items in one or more specified locations.</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para/>
			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>LongChildItem</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>The Get-LongChildItem cmdlet gets the items in one or more specified locations. If the item is a container, it gets the items inside the container, known as child items. You can use the Recurse parameter to get items in all child containers.</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-LongChildItem</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="0" aliases="">
					<maml:name>Path</maml:name>
					<maml:description>
						<maml:para>Specifies a path to one or more locations. Wildcards are NOT permitted. The default location is the current directory.</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String[]</command:parameterValue>
					<dev:defaultValue>current directory</dev:defaultValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
					<maml:name>Filter</maml:name>
					<maml:description>
						<maml:para>The value of this parameter qualifies the Path parameter. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
					<dev:defaultValue>None</dev:defaultValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
					<maml:name>Recurse</maml:name>
					<maml:description>
						<maml:para>Gets the items in the specified locations and in all child items of the locations.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
					<dev:defaultValue>false</dev:defaultValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
					<maml:name>Include</maml:name>
					<maml:description>
						<maml:para>Gets only the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String[]</command:parameterValue>
					<dev:defaultValue>None</dev:defaultValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
					<maml:name>Exclude</maml:name>
					<maml:description>
						<maml:para>Omits the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String[]</command:parameterValue>
					<dev:defaultValue>None</dev:defaultValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
					<maml:name>Directory</maml:name>
					<maml:description>
						<maml:para>Gets only the container items in the locations omitting all files.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
					<maml:name>File</maml:name>
					<maml:description>
						<maml:para>Gets only the file items in the locations omitting all container items.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
					<dev:defaultValue>None</dev:defaultValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
					<maml:name>Name</maml:name>
					<maml:description>
						<maml:para>Gets only the names of the items in the locations. If you pipe the output of this command to another command, only the item names are sent.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
					<dev:defaultValue>None</dev:defaultValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="0" aliases="">
				<maml:name>Path</maml:name>
				<maml:description>
					<maml:para>Specifies a path to one or more locations. Wildcards are NOT permitted. The default location is the current directory.</maml:para>
				</maml:description>
				<command:parameterValue required="false" variableLength="false">String[]</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>current directory</dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="named" aliases="">
				<maml:name>Filter</maml:name>
				<maml:description>
					<maml:para>The value of this parameter qualifies the Path parameter. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.</maml:para>
				</maml:description>
				<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>None</dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
				<maml:name>Recurse</maml:name>
				<maml:description>
					<maml:para>Gets the items in the specified locations and in all child items of the locations.</maml:para>
				</maml:description>
				<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				<dev:type>
					<maml:name>SwitchParameter</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>false</dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="named" aliases="">
				<maml:name>Include</maml:name>
				<maml:description>
					<maml:para>Gets only the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="false" variableLength="false">String[]</command:parameterValue>
				<dev:type>
					<maml:name>String[]</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>None</dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="named" aliases="">
				<maml:name>Exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="false" variableLength="false">String[]</command:parameterValue>
				<dev:type>
					<maml:name>String[]</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>None</dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
				<maml:name>Directory</maml:name>
				<maml:description>
					<maml:para>Gets only the container items in the locations omitting all files.</maml:para>
				</maml:description>
				<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				<dev:type>
					<maml:name>SwitchParameter</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue/>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
				<maml:name>File</maml:name>
				<maml:description>
					<maml:para>Gets only the file items in the locations omitting all container items.</maml:para>
				</maml:description>
				<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				<dev:type>
					<maml:name>SwitchParameter</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>None</dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>Gets only the names of the items in the locations. If you pipe the output of this command to another command, only the item names are sent.</maml:para>
				</maml:description>
				<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				<dev:type>
					<maml:name>SwitchParameter</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>None</dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<maml:description>
					<maml:para>You can pipe a string that contains a path to Get-LongChildItem.</maml:para>
				</maml:description>
				<dev:type>
					<maml:name>System.String
					</maml:name>
					<maml:uri/>
				</dev:type>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<maml:description>
					<maml:para>For more information see:
http://alphafs.alphaleonis.com/doc/2.0/api/html/C308A5E5.htm</maml:para>
				</maml:description>
				<dev:type>
					<maml:name>Alphaleonis.Win32.Filesystem.FileInfo</maml:name>
					<maml:uri>http://alphafs.alphaleonis.com/doc/2.0/api/html/C308A5E5.htm</maml:uri>
				</dev:type>
			</command:returnValue>
			<command:returnValue>
				<maml:description>
					<maml:para>If you use the Name parameter, Get-ChildItem returns the object names as strings.</maml:para>
				</maml:description>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri/>
				</dev:type>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<maml:title/>
			<!-- Notes-->
			<maml:alert>
				<maml:para>You can also refer to Get-LongChildItem by its built-in aliases &quot;ldir&quot;, and &quot;lgci&quot;. For more information, see about_Aliases.

Get-LongChildItem gets hidden items by default. 

The Get-LongChildItem cmdlet is designed to work with the data exposed by the AlphaFS  Filesystem provider and will NOT work with any other providers E.g.,Registry,Certificates etc

For more information, see (http://alphafs.alphaleonis.com/doc/2.0/api/html/7C1374.htm).</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!-- Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-LongChildItem -Path C:\temp -Filter d*.txt -Recurse


   Directory: C:\temp

Mode                  LastWriteTime          Length Name                                                                         
----                  -------------          ------ ----                                                                         
File            6/27/2015  11:44 AM            1488 drivers.txt                                                                  
File             7/3/2015  12:30 PM              72 dupes.txt                                                                    


   Directory: C:\temp\folder4\DSC06252

Mode                  LastWriteTime          Length Name                                                                         
----                  -------------          ------ ----                                                                         
File            8/23/2015   6:24 PM              93 dupes.txt </dev:code>
				<dev:remarks>
					<maml:para>This command gets all of the files that begin with the letter &apos;d&apos; followed by any character(s) but end with the extension &apos;TXT&apos; in the path directory and its subdirectories. The Recurse parameter directs Windows PowerShell to get objects recursively, and it indicates that the subject of the command is the specified directory and its contents. </maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-LongChildItem –Path C:\temp -Include *.txt -Exclude A*,c*,e*</dev:code>
				<dev:remarks>
					<maml:para>This command lists the .txt files in the temp directory, except for those whose names start with the letter A or C or E.</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-LongChildItem –Path C:\windows\System32\WindowsPowerShell -Filter about*.txt  -Recurse -Name</dev:code>
				<dev:remarks>
					<maml:para>This command gets only the names of all Text files that begin with &apos;about&apos; in the C:\windows\System32\WindowsPowerShell directory and its subdirectories.</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 4 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-LongChildItem –Path C:\temp -Name -Directory -Recurse</dev:code>
				<dev:remarks>
					<maml:para>This command gets only the names of all directories in the C:\temp directory and its subdirectories.</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 5 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-LongChildItem -Path C:\temp -Recurse | Where PathLength -gt 260</dev:code>
				<dev:remarks>
					<maml:para>This command gets all files and folders recursively. The output is then piped to Where-object which displays only those files whose length exceeds the windows API 260 character length limitation.</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Get-LongItem</command:name>
			<maml:description>
				<maml:para/>
			</maml:description>
			<maml:copyright>
				<maml:para/>
			</maml:copyright>
			<command:verb>Get</command:verb>
			<command:noun>LongItem</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>The Get-LongItem cmdlet gets the item at the specified location and not the contents of the item at the location.
			</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Get-LongItem</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="0" aliases="">
					<maml:name>Path</maml:name>
					<maml:description>
						<maml:para>Specifies the path to an item. Get-Item gets the item at the specified location. Wildcards are NOT permitted. This parameter is required, but the parameter name (&quot;Path&quot;) is optional.</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
					<dev:defaultValue>None</dev:defaultValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="0" aliases="">
				<maml:name>Path</maml:name>
				<maml:description>
					<maml:para>Specifies the path to an item. Get-Item gets the item at the specified location. Wildcards are NOT permitted. This parameter is required, but the parameter name (&quot;Path&quot;) is optional.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue>None</dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<maml:description>
					<maml:para>You can pipe a string that contains a path to Get-LongItem.</maml:para>
				</maml:description>
				<dev:type>
					<maml:name>System.String
					</maml:name>
					<maml:uri/>
				</dev:type>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<maml:description>
					<maml:para>For more information see:
http://alphafs.alphaleonis.com/doc/2.0/api/html/C308A5E5.htm</maml:para>
				</maml:description>
				<dev:type>
					<maml:name>Alphaleonis.Win32.Filesystem.FileInfo</maml:name>
					<maml:uri/>
				</dev:type>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!-- Notes-->
			<maml:alert>
				<maml:para>Get-LongItem does not have a Recurse parameter, because it gets only an item, not its contents. To get the contents of an item recursively, use Get-LongChildItem.</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!-- Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-LongItem C:\temp</dev:code>
				<dev:remarks>
					<maml:para>This command gets the &apos;fileinfo&apos; for the directory C:\temp. The object that is retrieved represents only the directory, not its contents.</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Remove-LongItem</command:name>
			<maml:description>
				<maml:para>Deletes specified item.</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para/>
			</maml:copyright>
			<command:verb>Remove</command:verb>
			<command:noun>LongItem</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>The Remove-LongItem cmdlet deletes filesystem items.</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Remove-LongItem</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="0" aliases="">
					<maml:name>Path</maml:name>
					<maml:description>
						<maml:para>Specifies a path to the items being removed. Wildcards are NOT permitted. The parameter name (&quot;-Path&quot;) is optional.</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
					<maml:name>Recurse</maml:name>
					<maml:description>
						<maml:para>Deletes the items in the specified locations and in all child items of the locations.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
					<maml:name>Force</maml:name>
					<maml:description>
						<maml:para>Allows the cmdlet to remove items that cannot otherwise be changed, such as read-only files.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="0" aliases="">
				<maml:name>Path</maml:name>
				<maml:description>
					<maml:para>Specifies a path to the items being removed. Wildcards are NOT permitted. The parameter name (&quot;-Path&quot;) is optional.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue/>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
				<maml:name>Recurse</maml:name>
				<maml:description>
					<maml:para>Deletes the items in the specified locations and in all child items of the locations.</maml:para>
				</maml:description>
				<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				<dev:type>
					<maml:name>SwitchParameter</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue/>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
				<maml:name>Force</maml:name>
				<maml:description>
					<maml:para>Allows the cmdlet to remove items that cannot otherwise be changed, such as read-only files.</maml:para>
				</maml:description>
				<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				<dev:type>
					<maml:name>SwitchParameter</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue/>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.String
					</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para/>
				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<maml:description>
					<maml:para>This cmdlet does not return any output.</maml:para>
				</maml:description>
				<dev:type>
					<maml:name>None</maml:name>
					<maml:uri/>
				</dev:type>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!--Notes-->
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Remove-LongItem -Path C:\temp\folder3\drivers.txt -force</dev:code>
				<dev:remarks>
					<maml:para>This command deletes a file that is read-only. It uses the Path parameter to specify the file. It uses the Force parameter to give permission to delete it. Without Force, you cannot delete read-only files.</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Remove-LongItem -path C:\temp\folder7\filenames -Recurse</dev:code>
				<dev:remarks>
					<maml:para>This command deletes the folder &apos;filenames&apos; including all files and sub-folders. </maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Rename-LongItem</command:name>
			<maml:description>
				<maml:para>Renames an item in a AlphaFS FileSystem provider namespace.</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para/>
			</maml:copyright>
			<command:verb>Rename</command:verb>
			<command:noun>LongItem</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>The Rename-LongItem cmdlet changes the name of a specified item. This cmdlet does not affect the content of the item being renamed.</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Rename-LongItem</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="0" aliases="">
					<maml:name>Path</maml:name>
					<maml:description>
						<maml:para>Specifies the path to the item to rename.</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="1" aliases="">
					<maml:name>NewName</maml:name>
					<maml:description>
						<maml:para>Specifies the new name of the item. Enter only a name, not a path and name.

You cannot use wildcard characters in the value of NewName. To specify a name for multiple files, use the Replace operator in a regular expression. For more information about the Replace operator, type &quot;get-help about_comparison_operators&quot;. For a demonstration, see the examples.</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
					<maml:name>Force</maml:name>
					<maml:description>
						<maml:para>Allows the cmdlet to rename items that cannot otherwise be changed, such as read-only files.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="0" aliases="">
				<maml:name>Path</maml:name>
				<maml:description>
					<maml:para>Specifies the path to the item to rename.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue/>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="1" aliases="">
				<maml:name>NewName</maml:name>
				<maml:description>
					<maml:para>Specifies the new name of the item. Enter only a name, not a path and name.

You cannot use wildcard characters in the value of NewName. To specify a name for multiple files, use the Replace operator in a regular expression. For more information about the Replace operator, type &quot;get-help about_comparison_operators&quot;. For a demonstration, see the examples.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue/>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
				<maml:name>Force</maml:name>
				<maml:description>
					<maml:para>Allows the cmdlet to rename items that cannot otherwise be changed, such as read-only files.</maml:para>
				</maml:description>
				<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				<dev:type>
					<maml:name>SwitchParameter</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue/>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.String
					</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para/>
				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<maml:description>
					<maml:para>This cmdlet does not return any output.</maml:para>
				</maml:description>
				<dev:type>
					<maml:name>None</maml:name>
					<maml:uri/>
				</dev:type>
			</command:returnValue>
		</command:returnValues>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Rename-LongItem -path C:\temp\drivers.txt -NewName d1.txt -Verbose -Confirm:$false</dev:code>
				<dev:remarks>
					<maml:para>This command renames the file drivers.txt to d1.txt</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-LongChildItem -Path C:\temp\drivers.txt |
    Rename-LongItem -NewName {&apos;prefix&apos; + $_.basename + &apos;Suffix&apos; + $_.extension } </dev:code>
				<dev:remarks>
					<maml:para>the file &apos;drivers.txt&apos; is renamed by piping the output of &apos;Get-LongChildItem&apos; to Rename-LongItem. The newfilename is created by adding a prefix and a suffix to the filename resulting in the following newname: &apos;PrefixdriversSuffix.txt&apos;.</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
	</command:command>
	<!--Generated by: SAPIEN PowerShell HelpWriter 2015 v1.0.15-->
	<!--Edited with: SAPIEN PowerShell HelpWriter 2015 v1.0.16-->
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>New-LongItem</command:name>
			<maml:description>
				<maml:para>Creates a new item.</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para/>
			</maml:copyright>
			<command:verb>New</command:verb>
			<command:noun>LongItem</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>The New-LongItem cmdlet creates new files or folders depending upon the parameters that are used.This cmdlet can only create filesystem items(file or folder).</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>New-LongItem</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="0" aliases="">
					<maml:name>Path</maml:name>
					<maml:description>
						<maml:para>Specifies the path to the location of the new item. Wildcards are NOT permitted.
						</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String[]</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
					<maml:name>ItemType</maml:name>
					<maml:description>
						<maml:para>Specifies whether you want to create a file or a folder.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
					<maml:name>Force</maml:name>
					<maml:description>
						<maml:para>Allows the cmdlet to create an item that writes over an existing read-only item. </maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
			</command:syntaxItem>
			<command:syntaxItem>
				<maml:name>New-LongItem</maml:name>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
					<maml:name>Path</maml:name>
					<maml:description>
						<maml:para>Specifies the path to the location of the new item. Wildcards are NOT permitted.
						</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String[]</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
					<maml:name>ItemType</maml:name>
					<maml:description>
						<maml:para>Specifies whether you want to create a file or a folder.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
					<maml:name>Name</maml:name>
					<maml:description>
						<maml:para>Specifies the name of the new item.
You can specify the name of the new item in the Name or Path parameter value, and you can specify the path to the new item in the Name or Path parameter value.</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
					<maml:name>Force</maml:name>
					<maml:description>
						<maml:para>Allows the cmdlet to create an item that writes over an existing read-only item. </maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="0" aliases="">
				<maml:name>Path</maml:name>
				<maml:description>
					<maml:para>Specifies the path to the location of the new item. Wildcards are NOT permitted.
					</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">String[]</command:parameterValue>
				<dev:type>
					<maml:name>String[]</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue/>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
				<maml:name>ItemType</maml:name>
				<maml:description>
					<maml:para>Specifies whether you want to create a file or a folder.</maml:para>
				</maml:description>
				<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue/>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
				<maml:name>Force</maml:name>
				<maml:description>
					<maml:para>Allows the cmdlet to create an item that writes over an existing read-only item. </maml:para>
				</maml:description>
				<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				<dev:type>
					<maml:name>SwitchParameter</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue/>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>Specifies the name of the new item.
You can specify the name of the new item in the Name or Path parameter value, and you can specify the path to the new item in the Name or Path parameter value.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue/>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.String[]
					</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para/>
				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<maml:description>
					<maml:para>For more information see:
http://alphafs.alphaleonis.com/doc/2.0/api/html/C308A5E5.htm</maml:para>
				</maml:description>
				<dev:type>
					<maml:name>Alphaleonis.Win32.Filesystem.FileInfo</maml:name>
					<maml:uri>http://alphafs.alphaleonis.com/doc/2.0/api/html/C308A5E5.htm</maml:uri>
				</dev:type>
			</command:returnValue>
		</command:returnValues>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>New-Longitem -path c:\temp -name logfiles -itemtype directory</dev:code>
				<dev:remarks>
					<maml:para>
					</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>New-LongItem -ItemType File  -path &apos;c:\temp\test.txt&apos;, &apos;c:\temp\logs\test.log&apos;</dev:code>
				<dev:remarks>
					<maml:para>This command uses the New-LongItem cmdlet to create files in two different directories. Because the Path parameter takes multiple strings, you can use it to create multiple items.</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>New-LongItem -Path C:\temp\123\456\hello.txt -Verbose</dev:code>
				<dev:remarks>
					<maml:para>The New-LongItem cmdlet is used to create the directory tree &apos;123&apos;\&apos;456&apos; which dosent exist and then finally a text file &apos;hello.txt&apos; inside the &apos;456&apos; directory.</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
	</command:command>
	<!--Edited with: SAPIEN PowerShell HelpWriter 2015 v1.0.16-->
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Move-LongItem</command:name>
			<maml:description>
				<maml:para/>
			</maml:description>
			<maml:copyright>
				<maml:para/>
			</maml:copyright>
			<command:verb>Move</command:verb>
			<command:noun>LongItem</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para/>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Move-LongItem</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="0" aliases="FullName">
					<maml:name>Path</maml:name>
					<maml:description>
						<maml:para>Specifies the path to the current location of the item.Wildcards are NOT permitted.</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="1" aliases="">
					<maml:name>Destination</maml:name>
					<maml:description>
						<maml:para>Specifies the path to the location where the items are being moved.</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
					<maml:name>Force</maml:name>
					<maml:description>
						<maml:para>Allows the cmdlet to move an item that writes over an existing read-only item</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="0" aliases="FullName">
				<maml:name>Path</maml:name>
				<maml:description>
					<maml:para>Specifies the path to the current location of the item.Wildcards are NOT permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue/>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="1" aliases="">
				<maml:name>Destination</maml:name>
				<maml:description>
					<maml:para>Specifies the path to the location where the items are being moved.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue/>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="">
				<maml:name>Force</maml:name>
				<maml:description>
					<maml:para>Allows the cmdlet to move an item that writes over an existing read-only item</maml:para>
				</maml:description>
				<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				<dev:type>
					<maml:name>SwitchParameter</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue/>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.String
					</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para/>
				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<maml:description>
					<maml:para>This cmdlet does not return any output.</maml:para>
				</maml:description>
				<dev:type>
					<maml:name>None</maml:name>
					<maml:uri/>
				</dev:type>
			</command:returnValue>
		</command:returnValues>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Move-LongItem -path C:\temp\test.txt -destination C:\Temp\folder1\tst.txt</dev:code>
				<dev:remarks>
					<maml:para>This command moves the Test.txt file from the C:\temp to the C:\Temp\folder1 directory and renames it from &quot;test.txt&quot; to &quot;tst.txt&quot;.</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Move-LongItem  -Path C:\temp\logfiles -Destination C:\temp\newlogfiles</dev:code>
				<dev:remarks>
					<maml:para>This command moves the C:\Temp\logfiles directory and its contents to the C:\temp\newLogfiles directory. The logfiles directory, and all of its subdirectories and files, then appear in the newLogfiles directory.</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Get-LongChildItem -Path C:\temp -Filter *.csv -Recurse  | Move-longItem -Destination C:\temp\logs -Verbose </dev:code>
				<dev:remarks>
					<maml:para>This command moves all of the csv files from the c:\temp directory and all subdirectories, recursively, to the C:\temp\logs directory.

The command uses the Get-LongChildItem cmdlet to get all of the child items in the temp directory and its subdirectories that have a *.csv file name extension. It uses the Recurse parameter to make the retrieval recursive and the filter parameter to limit the retrieval to *.csv files.

The pipeline operator (|) sends the results of this command to Move-LongItem, which moves the csv files to the logs directory.

If files being moved to C:\temp\logs have the same name, Move-LongItem displays an warning and continues, but it moves only one file with each name to C:\temp\logs. The other files remain in their original directories.

If the logs directory (or any other element of the destination path) does not exist, the command fails. The missing directory is not created for you, even if you use the Force parameter. </maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
	</command:command>
	<!--Edited with: SAPIEN PowerShell HelpWriter 2015 v1.0.16-->
</helpItems>